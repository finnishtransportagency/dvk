schema {
  query: Query
  mutation: Mutation
}

type Query {
  fairwayCards(status: [Status!]): [FairwayCard!]!
  fairwayCard(id: String!, version: String!): FairwayCard
  fairwayCardVersion(id: String!, version: String!): FairwayCard
  fairwayCardLatest(id: String!): FairwayCard
  fairwayCardPublic(id: String!): FairwayCard
  fairwayCardPreview(id: String!, version: String!): FairwayCard
  safetyEquipmentFaults: [SafetyEquipmentFault!]!
  marineWarnings: [MarineWarning!]!
  currentUser: CurrentUser
  pilotPlaces: [PilotPlace!]!
  harbors: [Harbor!]!
  harbor(id: String!, version: String!): Harbor
  harborVersion(id: String!, version: String!): Harbor
  harborLatest(id: String!): Harbor
  harborPublic(id: String!): Harbor
  harborPreview(id: String!, version: String!): Harbor
  fairways: [Fairway!]!
  fairwayCardsAndHarbors: [FairwayCardOrHarbor!]!
  mareographs: [Mareograph!]!
}

type Mutation {
  saveFairwayCard(card: FairwayCardInput!): FairwayCard
  saveHarbor(harbor: HarborInput!): Harbor
  uploadPicture(picture: PictureUploadInput!): Boolean
}

input PictureUploadInput {
  cardId: String!
  id: String!
  base64Data: String!
  contentType: String!
}

enum Operation {
  CREATE
  UPDATE
}

enum OperationError {
  CARD_ID_MISSING
  CARD_ALREADY_EXIST
  CARD_NOT_EXIST
  HARBOR_ID_MISSING
  HARBOR_ALREADY_EXIST
  HARBOR_NOT_EXIST
  NO_PERMISSIONS
  INVALID_INPUT
}

input FairwayCardInput {
  id: String!
  version: String!
  operation: Operation!
  name: TextInput!
  n2000HeightSystem: Boolean!
  group: String!
  status: Status!
  fairwayIds: [Float!]!
  primaryFairwayId: [SelectedFairwayInput!]
  secondaryFairwayId: [SelectedFairwayInput!]
  additionalInfo: TextInput
  lineText: TextInput
  designSpeed: TextInput
  generalInfo: TextInput
  anchorage: TextInput
  navigationCondition: TextInput
  iceCondition: TextInput
  attention: TextInput
  speedLimit: TextInput
  visibility: TextInput
  vesselRecommendation: TextInput
  mareographs: [Int!]
  windRecommendation: TextInput
  trafficService: TrafficServiceInput
  harbors: [String!]
  pictures: [PictureInput!]
  pilotRoutes: [Int!]
  temporaryNotifications: [TemporaryNotificationInput!]
}

input PictureInput {
  id: String!
  sequenceNumber: Int
  orientation: Orientation!
  rotation: Float
  scaleWidth: String
  scaleLabel: String
  text: String
  lang: String
  groupId: Float
  modificationTimestamp: Float
  legendPosition: String
}

enum Orientation {
  PORTRAIT
  LANDSCAPE
}

input TrafficServiceInput {
  pilot: PilotInput
  vts: [VTSInput]
  tugs: [TugInput]
}

input TugInput {
  name: TextInput!
  phoneNumber: [String!]
  fax: String
  email: String
}

input VHFInput {
  name: TextInput
  channel: String!
}

input VTSInput {
  name: TextInput!
  phoneNumber: String
  email: [String]
  vhf: [VHFInput]
}

input PilotInput {
  email: String
  phoneNumber: String
  fax: String
  internet: String
  extraInfo: TextInput
  places: [PilotPlaceInput!]
}

input PilotPlaceInput {
  id: Float!
  pilotJourney: String
}

input HarborInput {
  id: String!
  version: String!
  n2000HeightSystem: Boolean!
  operation: Operation!
  status: Status!
  phoneNumber: [String]
  fax: String
  email: String
  internet: String
  name: TextInput!
  company: TextInput
  extraInfo: TextInput
  harborBasin: TextInput
  cargo: TextInput
  quays: [QuayInput]
  geometry: GeometryInput!
}

enum Status {
  DRAFT
  PUBLIC
  REMOVED
}

input GeometryInput {
  lat: String!
  lon: String!
}

input TextInput {
  fi: String!
  sv: String!
  en: String!
}

input QuayInput {
  name: TextInput
  length: String
  sections: [SectionInput]
  extraInfo: TextInput
  geometry: GeometryInput
}

input SectionInput {
  name: String
  depth: String
  geometry: GeometryInput
}

input TemporaryNotificationInput {
  content: TextInput!
  startDate: String!
  endDate: String
}

input SelectedFairwayInput {
  id: Int!
  sequenceNumber: Int!
}

type FairwayCardOrHarbor {
  id: String!
  version: String!
  type: ContentType!
  name: Text!
  group: String
  fairwayIds: [Int!]
  n2000HeightSystem: Boolean!
  status: Status!
  creator: String
  modifier: String
  modificationTimestamp: Float
  temporaryNotifications: [TemporaryNotification]
}

enum ContentType {
  CARD
  HARBOR
}

type CurrentUser {
  uid: String!
  name: String!
  roles: [String!]!
}

type FairwayCard {
  id: String!
  version: String!
  name: Text!
  n2000HeightSystem: Boolean!
  group: String
  status: Status
  creator: String
  creationTimestamp: Float
  modifier: String
  modificationTimestamp: Float
  fairwayIds: String
  fairways: [Fairway!]!
  additionalInfo: Text
  lineText: Text
  designSpeed: Text
  generalInfo: Text
  anchorage: Text
  navigationCondition: Text
  iceCondition: Text
  attention: Text
  speedLimit: Text
  visibility: Text
  vesselRecommendation: Text
  mareographs: [Mareograph!]
  windRecommendation: Text
  trafficService: TrafficService
  harbors: [Harbor!]
  pictures: [Picture!]
  pilotRoutes: [PilotRoute!]
  temporaryNotifications: [TemporaryNotification!]
}

type Picture {
  id: String!
  sequenceNumber: Int
  orientation: Orientation!
  rotation: Float
  text: String
  lang: String
  scaleLabel: String
  scaleWidth: String
  groupId: Float
  modificationTimestamp: Float
  legendPosition: String
}

type TrafficService {
  pilot: Pilot
  vts: [VTS]
  tugs: [Tug]
}

type Tug {
  name: Text
  phoneNumber: [String]
  fax: String
  email: String
}

type VHF {
  name: Text
  channel: Int
}

type VTS {
  name: Text
  phoneNumber: String
  email: [String]
  vhf: [VHF]
}

type Pilot {
  email: String
  phoneNumber: String
  fax: String
  internet: String
  extraInfo: Text
  places: [PilotPlace!]
}

type PilotPlace {
  id: Float!
  name: Text!
  pilotJourney: Float
  geometry: GeometryPoint!
}

type Harbor {
  id: String!
  version: String
  status: Status
  n2000HeightSystem: Boolean
  creator: String
  creationTimestamp: Float
  modifier: String
  modificationTimestamp: Float
  quays: [Quay]
  name: Text
  company: Text
  phoneNumber: [String]
  fax: String
  email: String
  internet: String
  extraInfo: Text
  harborBasin: Text
  cargo: Text
  geometry: GeometryPoint
}

type Quay {
  name: Text
  length: Float
  sections: [Section]
  extraInfo: Text
  geometry: GeometryPoint
}

type Section {
  name: String
  depth: Float
  geometry: GeometryPoint
}

type Fairway {
  id: Int!
  name: Text
  primary: Boolean
  primarySequenceNumber: Int
  secondary: Boolean
  secondarySequenceNumber: Int
  startText: String
  endText: String
  lightingCode: String
  lighting: Text
  typeCode: String
  type: Text
  owner: String
  area: Text
  sizing: Sizing
  classifications: [Classification!]
  sizingVessels: [SizingVessel!]
  navigationLines: [NavigationLine!]
  areas: [Area!]
  restrictionAreas: [RestrictionArea!]
  prohibitionAreas: [ProhibitionArea!]
  boardLines: [Boardline!]
  turningCircles: [TurningCircle!]
}

type Classification {
  type: String
  fairwayClassCode: String
  fairwayClass: Text
}

type AreaFairway {
  fairwayId: Int!
  status: Int
  line: Int
  sizingSpeed: Float
  sizingSpeed2: Float
  sequenceNumber: Int
}

type Area {
  id: Int!
  name: String
  depth: Float
  draft: Float
  referenceLevel: String
  n2000depth: Float
  n2000draft: Float
  n2000ReferenceLevel: String
  direction: Float
  journalNumber: String
  verificationDate: String
  owner: String
  additionalInformation: String
  typeCode: Int
  type: String
  notationCode: Float
  notation: String
  operationStatusCode: Float
  operationStatus: String
  operationTypeCode: Float
  operationType: String
  operationDirectionCode: Float
  operationDirection: String
  fairways: [AreaFairway!]
  geometry: GeometryPolygon
}

type RestrictionArea {
  id: Int!
  types: [RestrictionType!]
  value: Float
  presenter: String
  journalNumber: String
  verificationDate: String
  modificationDate: String
  startDate: String
  endDate: String
  status: String
  source: String
  location: String
  municipality: String
  exception: String
  geometry: GeometryPolygon
  fairways: [RestrictionFairway!]
}

type RestrictionType {
  code: String
  text: String
}

type RestrictionFairway {
  fairwayId: Int!
}

type ProhibitionArea {
  id: Int!
  extraInfo: Text
  fairway: ProhibitionFairway!
}

type ProhibitionFairway {
  fairwayId: Int!
  name: Text
}

type BoardlineFairway {
  fairwayId: Int!
}

type Boardline {
  id: Int!
  direction: Float
  geometry: GeometryLine
  fairways: [BoardlineFairway!]
}

type TurningCircleFairway {
  fairwayId: Int!
}

type TurningCircle {
  id: Int!
  geometry: GeometryLine
  diameter: Int
  fairways: [TurningCircleFairway!]
}

type SizingVessel {
  typeCode: String
  type: String
  length: Float
  width: Float
  draft: Float
  size: Float
  bodyFactor: Float
}

type Sizing {
  normalTurningCircle: Float
  minimumTurningCircle: Float
  normalWidth: Float
  minimumWidth: Float
  additionalInformation: String
  mareograph: String
  reserveWater: String
}

type NavigationLine {
  id: Int!
  depth: Float
  draft: Float
  referenceLevel: String
  n2000depth: Float
  n2000draft: Float
  n2000ReferenceLevel: String
  direction: Float
  length: Float
  owner: String
  verificationDate: String
  journalNumber: String
  additionalInformation: String
  type: String
  typeCode: String
  geometry: GeometryLine
  fairways: [NavigationLineFairway!]
}

type NavigationLineFairway {
  fairwayId: Int!
  status: Int
  line: Int
}

type SafetyEquipmentFault {
  id: Int!
  name: Text
  equipmentId: Int!
  typeCode: Int!
  type: Text
  recordTime: Float!
  geometry: GeometryPoint!
}

type GeometryPolygon {
  type: String
  coordinates: [[[Float]]]
}

type GeometryLine {
  type: String
  coordinates: [[Float]]
}

type GeometryPoint {
  type: String
  coordinates: [Float]
}

type Text {
  fi: String
  sv: String
  en: String
}

type MarineWarning {
  id: Int!
  number: Int!
  area: Text!
  type: Text!
  location: Text!
  description: Text!
  startDateTime: Float
  endDateTime: Float
  dateTime: Float!
  notifier: String!
  equipmentId: Float
  lineId: Float
  areaId: Float
}

type PilotRoute {
  id: Int!
  name: String
}

type TemporaryNotification {
  content: Text
  startDate: String
  endDate: String
}

type Mareograph {
  id: Int!
  name: String
  dateTime: Float
  waterLevel: Float
  n2000WaterLevel: Float
  calculated: Boolean
}
