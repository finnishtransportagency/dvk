schema { 
  query: Query
}

type Query {
  fairwayCards: [FairwayCard!]!
  fairwayCard(id: String!): FairwayCard
  navigationLines: [NavigationLine!]!
}

type FairwayCard {
  id: ID!
  name: Text!
  fairways: [Fairway!]!
  lineText: Text
  anchorage: [Text]
  navigationCondition: Text
  iceCondition: Text
  speedLimit: [Text]
  visibility: Text
  windGauge: Text
  vesselRecommendation: Text
  seaLevel: Text
  windRecommendation: Text
  trafficService: TrafficService
  cargo: [Text]
  harbors: [Harbor]
}

type TrafficService {
  pilot: Pilot
  vts: VTS
  tugs: [Tug]
}

type Tug {
  name: Text
  phoneNumber: [String]
  fax: String
  email: String
}

type VTS {
  name: Text
  phoneNumber: String
  email: [String]
  vhf: Int
}

type Pilot {
  email: String
  phoneNumber: String
  fax: String
  internet: String
  geometry: GeometryPoint
  pilotJourney: Float
  extraInfo: Text
}

type Harbor {
  quays: [Quay]
  name: Text
  phoneNumber: String
  fax: String
  email: String
  internet: String
  extraInfo: Text
  harborBasin: Text
}

type Quay {
  name: Text
  length: Float
  draft: [Float]
  extraInfo: Text
  cargo: Text
  geometry: GeometryPoint
}

type Fairway {
  id: Int!
  name: Text!
  length: Float
  draft1: Float
  draft2: Float
  draft3: Float
  statementStart: Text
  statementEnd: Text
  lighting: Boolean
  sizings: [Sizing!]
  sizingVessels: [SizingVessel!]
  navigationLines: [NavigationLine!]
  areas: [Area!]
  geotiffImages: [String]
}

type Area {
  id: Int!
  geometry: Geometry
  sizingSpeed: Float
  sizingSpeed2: Float
  depth: Float
  draft: Float
  qualityClass: Int
  type: Int
}

type SizingVessel {
  id: Int!
  type: Int
  length: Float
  width: Float
  draft: Float
}

type Sizing {
  id: Int!
  length: Float
  width: Float
  draft: Float
  normalTurningCircle: Float
  minimumTurningCircle: Float
  normalWidth: Float
  minimumWidth: Float
  additionalInformation: String
  mareograph: String
  reserveWater: String
}

type NavigationLine {
  id: Int!
  fairwayId: Int!
  length: Float
  depth: Float
  draft: Float
  type: Int
  qualityClass: Int
  direction: Float
  geometry: Geometry
}

type Geometry {
  type: String
  bbox: [Float]
  coordinates: [[Float]]
}

type GeometryPoint {
  type: String
  bbox: [Float]
  coordinates: [Float]
}

type Text {
  fi: String
  sv: String
  en: String
}
