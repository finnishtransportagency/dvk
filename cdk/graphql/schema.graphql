schema { 
  query: Query
}

type Query {
  fairwayCards: [FairwayCard!]!
  fairwayCard(id: String!): FairwayCard
  fairwayCardsByFairwayId(id: Int!): [FairwayCard]
}

type FairwayCard {
  id: ID!
  name: Text!
  group: String
  modificationTimestamp: Int
  fairwayIds: String
  fairways: [Fairway!]!
  lineText: Text
  designSpeed: Text
  generalInfo: Text
  anchorage: [Text]
  navigationCondition: Text
  iceCondition: Text
  attention: Text
  speedLimit: [Text]
  visibility: Text
  windGauge: Text
  vesselRecommendation: Text
  seaLevel: Text
  windRecommendation: Text
  trafficService: TrafficService
  harbors: [Harbor]
}

type TrafficService {
  pilot: Pilot
  vts: VTS
  tugs: [Tug]
}

type Tug {
  name: Text
  phoneNumber: [String]
  fax: String
  email: String
}

type VTS {
  name: Text
  phoneNumber: String
  email: [String]
  vhf: Int
}

type Pilot {
  email: String
  phoneNumber: String
  fax: String
  internet: String
  extraInfo: Text
  places: [PilotPlace!]
}

type PilotPlace {
  id: Float!
  name: String!
  pilotJourney: Float
  geometry: GeometryPoint!
}

type Harbor {
  id: String!
  quays: [Quay]
  name: Text
  phoneNumber: [String]
  fax: String
  email: String
  internet: String
  extraInfo: Text
  harborBasin: Text
  cargo: [Text]
  geometry: GeometryPoint
}

type Quay {
  name: Text
  length: Float
  sections: [Section]
  extraInfo: Text
  geometry: GeometryPoint
}

type Section {
  name: String
  draft: Float
  geometry: GeometryPoint
}

type Fairway {
  id: Int!
  name: Text
  primary: Boolean
  startText: String
  endText: String
  lightingCode: String
  lighting: Text
  typeCode: String
  type: Text
  owner: String
  area: Text
  sizing: Sizing
  classifications: [Classification!]
  sizingVessels: [SizingVessel!]
  navigationLines: [NavigationLine!]
  areas: [Area!]
  restrictionAreas: [RestrictionArea!]
  geotiffImages: [String]
}

type Classification {
  type: String
  fairwayClassCode: String
  fairwayClass: Text
}

type AreaFairway {
  fairwayId: Int!
  status: Int
  line: Int
  sizingSpeed: Float
  sizingSpeed2: Float
}

type Area {
  id: Int!
  name: String
  depth: Float
  draft: Float
  referenceLevel: String
  n2000depth: Float
  n2000draft: Float
  n2000ReferenceLevel: String
  direction: Float
  journalNumber: String
  verificationDate: String
  owner: String
  additionalInformation: String
  typeCode: Int
  type: String
  notationCode: Float
  notation: String
  operationStatusCode: Float
  operationStatus: String
  operationTypeCode: Float
  operationType: String
  operationDirectionCode: Float
  operationDirection: String
  fairways: [AreaFairway!]
  geometry: GeometryPolygon
}

type RestrictionArea {
  id: Int!
  types: [RestrictionType!]
  value: Float
  presenter: String
  journalNumber: String
  verificationDate: String
  modificationDate: String
  startDate: String
  endDate: String
  status: String
  source: String
  location: String
  municipality: String
  exception: String
  geometry: GeometryPolygon
  fairways: [RestrictionFairway!]
}

type RestrictionType {
  code: String
  text: String
}

type RestrictionFairway {
  fairwayId: Int!
}

type SizingVessel {
  typeCode: String
  type: String
  length: Float
  width: Float
  draft: Float
  size: Float
  bodyFactor: Float
}

type Sizing {
  normalTurningCircle: Float
  minimumTurningCircle: Float
  normalWidth: Float
  minimumWidth: Float
  additionalInformation: String
  mareograph: String
  reserveWater: String
}

type NavigationLine {
  id: Int!
  depth: Float
  draft: Float
  referenceLevel: String
  n2000depth: Float
  n2000draft: Float
  n2000ReferenceLevel: String
  direction: Float
  length: Float
  owner: String
  verificationDate: String
  journalNumber: String
  additionalInformation: String
  type: String
  typeCode: String
  geometry: GeometryLine!
  fairways: [NavigationLineFairway!]
}

type NavigationLineFairway {
  fairwayId: Int!
  status: Int
  line: Int
}

type GeometryPolygon {
  type: String
  coordinates: [[[Float]]]
}

type GeometryLine {
  type: String
  coordinates: [[Float]]
}

type GeometryPoint {
  type: String
  coordinates: [Float]
}

type Text {
  fi: String
  sv: String
  en: String
}
