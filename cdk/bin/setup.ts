// This script examines stack outputs and writes .env.local file
// eslint-disable-next-line import/named
import { CloudFormationClient, DescribeStacksCommand, DescribeStacksCommandOutput } from '@aws-sdk/client-cloudformation';
import * as fs from 'fs';
import Config from '../lib/config';
import { readParametersByPath, readSecrets } from './environment';

const euWestCFClient = new CloudFormationClient({ region: 'eu-west-1' });

type BackendStackOutputs = {
  AppSyncAPIURL: string;
  AppSyncAPIKey: string;
  LoadBalancerDnsName: string;
};

type FrontendStackOutputs = {
  CloudFrontDomainName?: string;
};

async function readStackOutputsForRawStackName(stackName: string): Promise<Record<string, string>> {
  const output: DescribeStacksCommandOutput = await euWestCFClient.send(new DescribeStacksCommand({ StackName: stackName }));
  return (
    output.Stacks?.[0].Outputs?.reduce(
      (params, param) => {
        // Include only non-null values. Exclude automatically generated outputs by CDK
        if (param.OutputKey && param.OutputValue && !param.OutputKey.startsWith('ExportsOutput')) {
          params[param.OutputKey] = param.OutputValue;
        }
        return params;
      },
      {} as Record<string, string>
    ) ?? {}
  );
}

async function readBackendStackOutputs(): Promise<BackendStackOutputs> {
  return (await readStackOutputsForRawStackName('DvkBackendStack-' + Config.getEnvironment())) as BackendStackOutputs;
}

async function readFrontendStackOutputs(): Promise<FrontendStackOutputs> {
  try {
    return (await readStackOutputsForRawStackName('SquatSiteStack-' + Config.getEnvironment())) as FrontendStackOutputs;
  } catch (e) {
    // Frontend stack is not mandatory for local development
    return { CloudFrontDomainName: undefined };
  }
}

async function readParametersForEnv(environment: string): Promise<Record<string, string>> {
  if (!Config.isFeatureEnvironment()) {
    const results: Record<string, string> = {
      ...(await readParametersByPath('/')), // Read global parameters from root
      ...(await readParametersByPath('/' + environment + '/')), // Then override with environment specific ones if provided
      ...(await readSecrets(environment + '/', true)),
      ...(await readSecrets(environment + '/')),
    };
    return results;
  }
  // feature pipeline has environment variables already in place
  return {};
}

function writeEnvFile(fileName: string, variables: { [p: string]: string }) {
  let envFile = '# This file is automatically generated\n';
  for (const key in variables) {
    // eslint-disable-next-line no-prototype-builtins
    if (variables.hasOwnProperty(key) && variables[key]) {
      envFile += `${key}=${variables[key]}\n`;
    }
  }
  fs.writeFileSync(fileName, envFile);
}

async function main() {
  const backendStackOutputs = await readBackendStackOutputs();
  const frontendStackOutputs = await readFrontendStackOutputs();
  const envParameters = await readParametersForEnv(Config.getEnvironment());
  writeEnvFile('../.env.local', {
    VITE_APP_API_URL: backendStackOutputs.AppSyncAPIURL,
    VITE_APP_API_KEY: backendStackOutputs.AppSyncAPIKey,
    VITE_APP_REST_API_URL: `http://${Config.isDeveloperEnvironment() ? 'localhost:8080' : backendStackOutputs.LoadBalancerDnsName}/api`,
    VITE_APP_FRONTEND_DOMAIN_NAME: frontendStackOutputs.CloudFrontDomainName ?? '',
    VITE_APP_BG_MAP_API_URL: envParameters.BGMapApiUrl,
    VITE_APP_BG_MAP_API_KEY: envParameters.BGMapApiKey,
    VITE_APP_STATIC_URL: frontendStackOutputs.CloudFrontDomainName ?? 'dvkdev.testivaylapilvi.fi',
    VITE_APP_FMI_MAP_API_KEY: envParameters.WeatherApiKey,
    VITE_APP_FMI_MAP_API_URL: envParameters.WeatherUrl,
    VITE_APP_TRAFICOM_API_URL: envParameters.TraficomUrl,
    VITE_APP_IMAGE_URL: frontendStackOutputs.CloudFrontDomainName
      ? `https://${frontendStackOutputs.CloudFrontDomainName}/s3static/`
      : `http://${Config.isDeveloperEnvironment() ? 'localhost:8080' : backendStackOutputs.LoadBalancerDnsName}/api/image?id=`,
  });
  writeEnvFile('../admin/.env.local', {
    REACT_APP_API_URL: backendStackOutputs.AppSyncAPIURL,
    REACT_APP_API_KEY: backendStackOutputs.AppSyncAPIKey,
    REACT_APP_ENV: 'local',
  });
}

main().catch((e) => {
  console.log(e);
  process.exit(1);
});
